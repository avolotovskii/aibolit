function pixelGlass() {
  'use strict';

  let controlsPanel;
  let mouseMoveHandler;
  // var bodyContentWrapper;
  var panelClass = 'controls-panel';
  var canBeDisabled = [];

  var prefix = 'pg';
  var filtersList = ['none', 'invert'];
  var statesList = ['off', 'on'];

  const htmlEl = document.querySelector('html');

  var currents = {
    state: getCurrent('state', statesList[1]),
    filter: getCurrent('filter', filtersList[0]),
    opacity: getCurrent('opacity', 0.5),
    positionY: getCurrent('positionY', 0)
  };

  var targets = {
    state: {
      elem: document.documentElement,
      attr: 'data'
    },
    filter: {
      elem: document.body,
      attr: 'data'
    },
    opacity: {
      elem: document.body,
      attr: 'style'
    }
  };

  // States switcher params
  const paramsStates = {
    elemTag: 'button',
    elemText: 'on',
    listName: 'states',
    itemName: 'state',
    target: targets.state,
    type: 'button',
    list: statesList,
    canDisableAll: true,
    attrs: {
      tabindex: 1,
    }
  };

  // Filters switcher params
  const paramsFilters = {
    elemTag: 'button',
    elemText: 'invert',
    listName: 'filters',
    itemName: 'filter',
    target: targets.filter,
    type: 'button',
    list: filtersList,
    attrs: {
      tabindex: 2,
    }
  };

  // Opacity range params
  const paramsOpacity = {
    itemName: 'opacity',
    type: 'number',
    target: targets.opacity,
    setAttr: 'style',
    attrs: {
      min: 0,
      max: 1,
      step: 0.1,
      tabindex: 3,
    }
  };

  // PositionY range params
  const paramsPositionY = {
    itemName: 'positionY',
    type: 'number',
    setAttr: 'style',
    attrs: {
      min: -550,
      max: 550,
      step: 1,
      tabindex: 3,
    }
  };

  //---------------------------------------------

  init();

  //---------------------------------------------

  function init() {
    createControlsPanel();
    applyCurrentData();

    if (currents.state === 'on'){
      applyCurrentStyles();
    }
  }

  //---------------------------------------------

  function createControlsPanel() {
    var targetElem = document.documentElement;

    if ( hasData( document.body, 'has-sticky-point' ) ) {
      var stickyPoint = document.querySelector('.sticky-point');

      if( stickyPoint && !localStorage['pg-released'] ) {
        targetElem = stickyPoint;
      }
      // Override defaults for demo page
      currents.state = 'off';
    }

    const controlsPanel = document.createElement('div');
    controlsPanel.classList.add(panelClass);
    targetElem.appendChild(controlsPanel);
    var sides = ['top', 'right', 'bottom', 'left'];

    sides.forEach(function(item) {
      var itemVal = getCurrent(item, '');
      if ( itemVal ) {
        controlsPanel.style[ item ] = itemVal;
      }
    });

    initControls(controlsPanel);
  }

  //---------------------------------------------

  function initControls(controlsPanel) {
    createButton(controlsPanel, paramsStates);
    createButton(controlsPanel, paramsFilters);
    createInputNumber(controlsPanel, paramsOpacity);
    createInputPosition(controlsPanel, paramsPositionY);
    createDragButton(controlsPanel);
  }

  //---------------------------------------------

  function createButton(controlsPanel, {
    itemName, elemTag, elemText, type, list, attrs, canDisableAll, target
  }) {

    let currentVal = currents[itemName];
    let currentNum = list.indexOf(currentVal);

    const id = itemName;
    const input = document.createElement(elemTag);
    setClasses(input, [
      panelClass + '__control',
      panelClass + '__control--' + type
    ]);
    input.setAttribute('type', type);
    input.setAttribute('id', id);
    setData( input, 'state-num', currentNum );

    if (attrs) {
      for (const [key, value] of Object.entries(attrs)) {
        input.setAttribute(key, value);
      }
    }

    if (elemTag === 'button') {
      input.innerHTML = elemText;
    }

    if (!canDisableAll) {
      canBeDisabled.push(input);
    }

    controlsPanel.appendChild(input);

    input.onclick = function() {
      if (!target) {
        return;
      }

      currentNum = +!currentNum;
      currentVal = list[currentNum];

      setData( input, 'state-num', currentNum );
      setData( target.elem, itemName, currentVal );

      saveLocalStorage(itemName, currentVal);

      if (canDisableAll && canDisableAll === true) {
        if (currentVal === 'off'){
          removeCurrentStyles();
          disableInputs();
        } else {
          applyCurrentStyles();
          enableInputs();
        }
      }
    };
  }

  //---------------------------------------------

  function createInputNumber(controlsPanel, { itemName, attrs, type, setAttr, canDisableAll, target }) {

    var id = itemName;
    var input = document.createElement('input');
    setClasses( input, [
      panelClass + '__control',
      panelClass + '__control--' + type
    ]);
    input.setAttribute('type', type);
    input.setAttribute('id', id);

    for (const [key, value] of Object.entries(attrs)) {
      input.setAttribute(key, value);
    }
    input.setAttribute('value', currents[itemName]);

    canBeDisabled.push(input);

    controlsPanel.appendChild(input);

    input.oninput = function() {
      if (setAttr === 'style') {
        target.elem.style[itemName] = this.value;
        saveLocalStorage(itemName, this.value);
      }
    };
  }

  //---------------------------------------------

  function createInputPosition(controlsPanel, { itemName, attrs, type, setAttr, canDisableAll }) {

    var id = itemName;
    var input = document.createElement('input');
    setClasses( input, [
      panelClass + '__control',
      panelClass + '__control--' + type
    ]);
    input.setAttribute('type', type);
    input.setAttribute('id', id);

    for (const [key, value] of Object.entries(attrs)) {
      input.setAttribute(key, value);

    }
    input.setAttribute('value', 0);

    canBeDisabled.push(input);

    controlsPanel.appendChild(input);

    input.oninput = function() {
      if (setAttr === 'style') {
        htmlEl.style.backgroundPositionY = `${this.value}px`;
        saveLocalStorage(itemName, this.value);
      }
    };
  }

  //---------------------------------------------

  function createDragButton(controlsPanel) {
    const dragBtn = document.createElement('button');
    setClasses(dragBtn, [
      panelClass + '__control',
      panelClass + '__control--drag-n-drop'
    ]);
    dragBtn.setAttribute('type', 'button');

    canBeDisabled.push(dragBtn);
    controlsPanel.appendChild(dragBtn);

    const mouseMoveHandlerMaker = ({offsetLeft, offsetTop}) => (evt) => {
      const x = `${(evt.clientX - offsetLeft)}px`;
      const y = `${(evt.clientY - offsetTop)}px`;

      controlsPanel.style.left = x;
      controlsPanel.style.top = y;
    };

    dragBtn.addEventListener('mousedown', (evt) => {
      // Place it here to get real sizes after
      // external styles has been loaded
      const offsetTop = evt.offsetY;
      console.log(offsetTop);
      const offsetLeft = controlsPanel.clientWidth - evt.currentTarget.clientWidth;
      console.log(offsetLeft);
      const styles = getComputedStyle(controlsPanel);
      // console.log(styles);

      // controlsPanel.style.inset = `${offsetTop}px auto auto ${offsetLeft}px`;

      // controlsPanel.style.top = styles.top;
      // controlsPanel.style.left = styles.left;
      // controlsPanel.style.right = 'auto';
      // controlsPanel.style.bottom = 'auto';

      mouseMoveHandler = mouseMoveHandlerMaker({ offsetLeft, offsetTop });
      document.addEventListener('mousemove', mouseMoveHandler);
    });

    dragBtn.addEventListener('mouseup', () => {
      var styles = getComputedStyle(controlsPanel);
      // var left = +styles.left.replace(/px/,'');
      // var right = +styles.right.replace(/px/,'');
      // var top = +styles.top.replace(/px/,'');
      // var bottom = +styles.bottom.replace(/px/,'');

      // if ( left > right ) {
        // saveLocalStorage('left', 'auto');
        // saveLocalStorage('right', styles.right);

        // controlsPanel.style.right = styles.right;
        // controlsPanel.style.left = 'auto';
      // } else {
        saveLocalStorage('left', styles.left);
        saveLocalStorage('right', 'auto'); //'auto' needs to override default position;
      // }

      // if ( top > bottom ) {
        // saveLocalStorage('top', 'auto');
        // saveLocalStorage('bottom', styles.bottom);

        // controlsPanel.style.bottom = styles.bottom;
        // controlsPanel.style.top = 'auto';
      // } else {
        saveLocalStorage('top', styles.top);
        saveLocalStorage('bottom', 'auto');
      // }

      document.removeEventListener('mousemove', mouseMoveHandler);

    });
  }

  //---------------------------------------------

  function disableInputs() {
    canBeDisabled.forEach((item) => {
      item.setAttribute('disabled', '');
    });
  }

  //---------------------------------------------

  function enableInputs() {
    canBeDisabled.forEach(function(item) {
      item.removeAttribute('disabled');
    });
  }

  //---------------------------------------------

  function getCurrent(name, defaultValue) {
    var itemName = [prefix, name].join('-');
    var localStorageVal = localStorage[ itemName ];
    return localStorageVal ? localStorageVal : defaultValue;
  }

  //---------------------------------------------

  function saveLocalStorage(name, value) {
    var itemName = [prefix, name].join('-');
    localStorage[itemName] = value;
  }

  //---------------------------------------------

  // Not used
  function getBodyOpacity() {
    var opacityStr = getComputedStyle(doc.body).opacity;
    return +opacityStr;
  }

  //---------------------------------------------

  // Not used
  function addExternalCSS() {
    var styleElem = doc.createElement('style');
    var cssLink = doc.createElement('link');
    cssLink.setAttribute('rel', 'stylesheet');
    cssLink.setAttribute('href', '../pixel-glass-js/styles.css');

    doc.head.appendChild(cssLink);
  }

  //---------------------------------------------

  function applyCurrentData() {
    for (var key in targets ) {
      var target = targets[ key ];
      var current = currents[ key ];

      if (target.attr === 'data') {
        setData( target.elem, key, current );
      }
    }

    if (currents.state === 'off') {
      disableInputs();
    }
  }
  //---------------------------------------------

  function applyCurrentStyles() {
    for (var key in targets ) {
      var target = targets[ key ];
      var current = currents[ key ];

      if (target.attr === 'style') {
        target.elem.style[ key ] = current;
      }
    }
  }

  //---------------------------------------------

  function removeCurrentStyles() {
    for (var key in targets ) {
      var target = targets[ key ];

      if (target.attr === 'style') {
        target.elem.style[ key ] = '';
      }
    }
  }

  //---------------------------------------------

  // Made for IE10, it doesn't support dataset

  function hasData( elem, dataName ) {
    if ( !elem ) {
      return false;
    }

    dataName = 'data-' + dataName;

    if ( elem.getAttribute( dataName) !== undefined && elem.getAttribute( dataName) !== null ) {
      return true;
    }

    return false;
  }

  //---------------------------------------------

  function setData( elem, dataName, dataVal ) {
    if ( !elem ) {
      return;
    }

    dataName = 'data-' + dataName;
    elem.setAttribute( dataName, dataVal );
  }

  //---------------------------------------------

  // Made for IE10, it doesn't support
  // multiply classes for classList.add

  function setClasses( elem, classes ) {
    if ( !elem ) {
      return;
    }

    if ( classes.length > 0 ) {
      classes.forEach( function ( className ) {
        elem.classList.add( className );
      });
    }
  }

  //---------------------------------------------
}

document.addEventListener('DOMContentLoaded', () => {
  pixelGlass();
});
